/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */

package cop5556sp18;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.rmi.MarshalException;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.AST.Program;

public class CodeGenTest {

	// determines whether show prints anything
	static boolean doPrint = true;

	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	// determines whether a classfile is created
	static boolean doCreateFile = false;

	@Rule
	public ExpectedException thrown = ExpectedException.none();

	// values passed to CodeGenerator constructor to control grading and debugging
	// output
	private boolean devel = true; // if true, print devel output
	private boolean grade = true; // if true, print grade output

	// private boolean devel = false;
	// private boolean grade = false;

	// sets the default width and height of newly created images. Should be small
	// enough to fit on screen.
	public static final int defaultWidth = 980;
	public static final int defaultHeight = 1024;

	/**
	 * Generates bytecode for given input. Throws exceptions for Lexical, Syntax,
	 * and Type checking errors
	 * 
	 * @param input
	 *            String containing source code
	 * @return Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {

		// scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
		// show(program); //It may be useful useful to show this here if code generation
		// fails

		// generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); // doing it here shows the values filled in during code gen
		// display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));

		// write byte code to file
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}

		// return generated classfile as byte array
		return bytecode;
	}

	/**
	 * Run main method in given class
	 * 
	 * @param className
	 * @param bytecode
	 * @param commandLineArgs
	 *            String array containing command line arguments, empty array if
	 *            none
	 * @throws +
	 * @throws Throwable
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception {
		RuntimeLog.initLog(); // initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = { commandLineArgs.getClass() };
		Method m = testClass.getMethod("main", argTypes);
		show("Output from " + m + ":"); // print name of method to be executed
		Object passedArgs[] = { commandLineArgs }; // create array containing params, in this case a single array.
		try {
			m.invoke(null, passedArgs);
		} catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw e;
		}
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then
	 * immediately deleted. To prevent this behavior, waitForKey will pause until a
	 * key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then
	 * immediately deleted. To prevent this behavior, keepFrame will keep the frame
	 * visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}

	/**
	 * Since we are not doing any optimization, the compiler will still create a
	 * class with a main method and the JUnit test will execute it.
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main"
	 * messages to the log.
	 * 
	 * @throws Exception
	 */
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";
		String input = prog + "{}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n " + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerLit() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;", RuntimeLog.globalLog.toString());
	}

	public void dummy() {
		int x = 2, y = 3;
		int c = x;
	}

	@Test
	public void declareAndAssign15() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 5; a := b ** 2; show a;} ";
		System.out.println(input);
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;25;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign16() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.5; a := b ** 2; show a;} ";
		System.out.println(input);
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;30.25;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign17() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.5; a := b ** 2.1; show a;} ";
		System.out.println(input);
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;35.872494;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign18() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{image y; input y from @ 0 ; show y;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign19() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{image y; image copy[128,256]; input y from @ 0 ; show y; copy := y; show copy;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign20() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{image y;\n  show y;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign21() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{image x; input x from @ 0 ; show x; image y; y := x; show y;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign22() throws Exception {
		String prog = "intFloatLit";
		String input = prog
				+ "{image b[512,256]; show width(b); show height(b);\nimage c; show width(c); show height(c);} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	// retest 2

	@Test
	public void declareAndAssign23() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{image y[300,400];\n  input y from @ 0 ;\n show y;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign24() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{image y; input y from @ 0; show width(y);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign25() throws Exception {
		String prog = "intFloatLit";
		String input = prog
				+ "{image b[512,256]; show width(b); show height(b);\nimage c; show width(c); show height(c);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;512;256;980;1024;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign26() throws Exception {
		String prog = "intFloatLit";
		String input = prog
				+ "{image y[1000,1000]; image copy[1000,1000]; input y from @ 0 ; show y; copy := y; show copy;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void testExpressionFuncArg4() throws Exception {
		String prog = "testExpressionFuncArg4";
		String input = prog + "{int a; a := 123456789; show alpha(a);" + "a := -1; show alpha(a);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;7;255;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign29() throws Exception {
		String prog = "intFloatLit";
		String input = prog
				+ "{image x; input x from @ 0 ; show x; image y; y := x; show y; show width(y);show height(y);} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "D:\\1st sem\\Digital Currencies\\Assignments\\Assignment 2\\P130911390.jpg" }; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void declareAndAssign39() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{show log(1.0); show atan(0.5);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;36.758343;leaving
		// main;",RuntimeLog.globalLog.toString());
	}

	@Test
	public void teststatementWhile() throws Exception {
		String prog = "statementWhile";
		String input = prog
				+ "{int x; x := 4;	image c; while(x != 0) { show c; int c; c := 4; x := x - 1; c := c + x;	show c; }; show x;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;-2;1;0.6435011;68.65858;leaving main;",
		// RuntimeLog.globalLog.toString());
	}

	@Test
	public void teststatementWhileee() throws Exception {
		String prog = "statementWhile";
		String input = prog
				+ "{ image im[256,256]; \nfilename f; \ninput f from @0; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<15,255,0,0>>; \nint z; z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;}" ;
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"sagar.png"};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;-2;1;0.6435011;68.65858;leaving main;",
		// RuntimeLog.globalLog.toString());
	}

	@Test
	public void teststatementWhileee1() throws Exception {
		String prog = "statementWhile";
		String input = prog + "{ image im; \ninput im from @0; \nfilename f; \ninput f from @1; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<15,255,0,0>>; \nint z; z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;\n}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"D:\\Eclipse workspace\\PLPassignment\\red_image.png", "sagar1.png"};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		// assertEquals("entering main;-2;1;0.6435011;68.65858;leaving main;",
		// RuntimeLog.globalLog.toString());
	}	
	
	public void dummy1() {

		float f = (float) 1.5;
		float f1 = (float) 3.4;

		if (f < f1) {
			System.out.println("LE");
		}
	}

	public void lol() {

		int f = 1;
		int f1 = 4;

		if (f < f1) {
			System.out.println("LE");
		}
	}

	// createDefaultSizeImage:
	//
	// Testing failed
	// with input:"prog{image y;\n show y;} ".
	// Image mismatch expected:<true>
	// but was:<false>
	//
	// readImageFromCommandLineAndScale:
	// Testing failed
	// with input:"prog{image y[300,400];\n input y from @ 0 ;\n show y;} ".
	// Stack Trace:java.lang.VerifyError:
	// Bad type
	// on operand
	// stack
	// Exception Details:Location:prog.main([Ljava/lang/String;)V @38:
	// invokestatic Reason:Type'java/lang/String'(current frame,stack[0])
	// is not assignable to'java/lang/Integer'
	// Current Frame:bci:@38
	//
	// assignImage2:
	// Testing failed
	// with input:"prog{image y[1000,1000]; image copy[1000,1000]; input y from @ 0
	// ; show y; copy := y; show copy;} ".
	// Stack Trace:java.lang.VerifyError:
	// Bad type
	// on operand
	// stack
	// Exception Details:Location:prog.main([Ljava/lang/String;)V @47:
	// invokestatic Reason:Type'java/lang/String'(current frame,stack[0])
	// is not assignable to'java/lang/Integer'
	// Current Frame:bci:@47
	//
	// testExpressionFuncArg1:
	// Testing failed
	// with input:"prog{image b[512,256]; show width(b); show height(b);\nimage c;
	// show width(c); show height(c);} ".expected:<512;256;[980;1024];>
	// but was:<512;256;[1024;980];>

	// readFromCommandLine: Testing failed with input: "prog{int x; input x from @ 0
	// ; show x;\nfloat y; input y from @ 1; show y;\nboolean z; input z from @ 2;
	// show z;\ninput z from @ 3; show z;}". Stack Trace:
	// java.lang.NumberFormatException: For input string: "true"
	// at
	// java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	// at java.lang.Integer.parseInt(Integer.java:580)
	// at java.lang.Integer.parseInt(Integer.java:615)
	// at prog.main(Unknown Source)
	// at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	// at
	// sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	// at
	// sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	//

	// readImageFromCommandLine: Testing failed with input: "prog{image y; input y
	// from @ 0 ; show y;} ". Image mismatch expected:<true> but was:<false>
	//

	// assignImageWithDifferentSize: Testing failed with input: "prog{image y; image
	// copy[128,256]; input y from @ 0 ; show y; copy := y; show copy;} ". Image
	// mismatch expected:<true> but was:<false>
	//
	// createDefaultSizeImage: Testing failed with input: "prog{image y;\n show y;}
	// ". Image mismatch expected:<true> but was:<false>
	//
	// assignImage1: Testing failed with input: "prog{image x; input x from @ 0 ;
	// show x; image y; y := x; show y;} ". Image mismatch expected:<true> but
	// was:<false>
	//
	// testExpressionFuncArg1: Testing failed with input: "prog{image b[512,256];
	// show width(b); show height(b);\nimage c; show width(c); show height(c);} ".
	// expected:<512;256;[980;1024];> but was:<512;256;[1024;980];>
	//
	//

}